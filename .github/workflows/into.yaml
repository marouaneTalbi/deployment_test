name: intro to ci
on: 
  push: 

env:
  NAME: Marouane
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  
jobs: 
  build:
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout
        uses: actions/checkout@v4

      - run: echo "Hello ${{env.NAME}}"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install


      - name: Build
        run : pnpm run build


      - name: Run the server
        run: |
              pnpm run preview &
              sleep 5

      - name: test with curl
        run: |
              curl -I http://localhost:4173
  
  deploy:
    runs-on: ubuntu-latest

    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
        with:
          version: 8
          run_install: false
            
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache 2
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install 

      # - name: Install Vercel CLI
      #   run: npm install --global vercel@latest
      # - name: Pull Vercel Environment Information
      #   run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN_ID }}
      # - name: Build Project Artifacts
      #   run: vercel build --token=${{ secrets.VERCEL_TOKEN_ID }}
      # - name: Deploy Project Artifacts to Vercel
      #   run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN_ID }}        

      - name: Deploy to Netlify
        uses: jsmrcaga/action-netlify-deploy@v2.0.0
        with:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN_ID }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PROJECT_ID }}
          install_command: pnpm install
          build_command: pnpm run build
          NETLIFY_DEPLOY_MESSAGE: "Deployed from GitHub action"
          NETLIFY_DEPLOY_TO_PROD: true
